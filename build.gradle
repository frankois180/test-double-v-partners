plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.rickandmorty'
version = '1.0'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.SR8")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {

	// ------------ Spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// ------------ Spring Cloud
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// ------------ Utils
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"
	implementation "org.mapstruct:mapstruct-jdk8:1.3.0.Final"
	implementation("org.apache.commons:commons-lang3:3.5")

	// ------------ Database
	runtimeOnly 'com.h2database:h2'

	// ------------ Test
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('junit:junit:4.13')
	testImplementation 'uk.co.jemos.podam:podam:7.1.0.RELEASE'

}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}

	all*.exclude group: 'org.apache.logging.log4j', module: "log4j-slf4j-impl"
}

sourceSets {
	main.java.srcDirs += "build/generated/source/apt/main"
}

test {
	useJUnitPlatform()
}
jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							'**/*Application*',
							'**/advice/*',
							'**/config/**',
							'**/delegate/*',
							'**/dto/**',
							'**/entity/**',
							'**/exception/**',
							'**/mapper/**',
							'**/model/**',
							'**/placeholder/**',
							'**/repository/**',
							'**/service/**'
					]
			)
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
		rule {
			element = 'CLASS'
			excludes = ['**.*Application*']
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.90
			}
		}
	}
}

test.finalizedBy jacocoTestReport

jacocoTestReport.dependsOn test
